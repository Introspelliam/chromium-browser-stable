--- chromium-74.0.3729.108/chrome/browser/tracing/trace_event_system_stats_monitor.cc.orig	2019-04-29 23:28:08.069667734 +0100
+++ chromium-74.0.3729.108/chrome/browser/tracing/trace_event_system_stats_monitor.cc	2019-04-29 23:32:49.165649758 +0100
@@ -84,8 +84,10 @@
   is_profiling_ = true;
   DCHECK(performance_monitor::SystemMonitor::Get());
   performance_monitor::SystemMonitor::Get()->AddOrUpdateObserver(
-      this, {.system_metrics_sampling_frequency =
-                 SamplingFrequency::kDefaultFrequency});
+      this, {.free_phys_memory_mb_frequency = SamplingFrequency::kNoSampling,
+             .disk_idle_time_percent_frequency = SamplingFrequency::kNoSampling,
+             .system_metrics_sampling_frequency =
+                 SamplingFrequency::kDefaultFrequency });
 }
 
 void TraceEventSystemStatsMonitor::OnSystemMetricsStruct(
--- chromium-74.0.3729.108/third_party/blink/renderer/platform/scheduler/common/web_thread_scheduler.cc.orig	2019-04-30 20:59:43.952010258 +0100
+++ chromium-74.0.3729.108/third_party/blink/renderer/platform/scheduler/common/web_thread_scheduler.cc	2019-04-30 21:04:19.495197612 +0100
@@ -21,7 +21,10 @@
     std::unique_ptr<base::MessagePump> message_pump,
     base::Optional<base::Time> initial_virtual_time) {
   auto settings = base::sequence_manager::SequenceManager::Settings{
-      .randomised_sampling_enabled = true};
+      .message_loop_type = base::MessageLoop::Type::TYPE_DEFAULT,
+      .randomised_sampling_enabled = true,
+      .clock = base::DefaultTickClock::GetInstance()
+  };
   auto sequence_manager =
       message_pump
           ? base::sequence_manager::
--- chromium-74.0.3729.108/third_party/blink/renderer/platform/scheduler/worker/non_main_thread_scheduler_impl.cc.orig	2019-04-30 22:38:11.355427414 +0100
+++ chromium-74.0.3729.108/third_party/blink/renderer/platform/scheduler/worker/non_main_thread_scheduler_impl.cc	2019-04-30 22:39:02.667424133 +0100
@@ -28,7 +28,9 @@
       thread_type,
       base::sequence_manager::CreateSequenceManagerOnCurrentThread(
           base::sequence_manager::SequenceManager::Settings{
-              .randomised_sampling_enabled = true}),
+              .message_loop_type = base::MessageLoop::Type::TYPE_DEFAULT,
+              .randomised_sampling_enabled = true,
+              .clock = base::DefaultTickClock::GetInstance()}),
       proxy);
 }
 
--- chromium-74.0.3729.108/third_party/blink/renderer/platform/scheduler/worker/compositor_thread.cc.orig	2019-04-30 22:48:34.180387586 +0100
+++ chromium-74.0.3729.108/third_party/blink/renderer/platform/scheduler/worker/compositor_thread.cc	2019-04-30 22:49:39.043383438 +0100
@@ -20,7 +20,9 @@
   return std::make_unique<CompositorThreadScheduler>(
       base::sequence_manager::CreateSequenceManagerOnCurrentThread(
           base::sequence_manager::SequenceManager::Settings{
-              .randomised_sampling_enabled = true}));
+              .message_loop_type = base::MessageLoop::Type::TYPE_DEFAULT,
+              .randomised_sampling_enabled = true,
+              .clock = base::DefaultTickClock::GetInstance()}));
 }
 
 }  // namespace scheduler
